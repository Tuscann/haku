<?php

class UsersController extends BaseController
{
    function index()
    {
        parent::index(); // TODO: Change the autogenerated stub
    }

    function register()
    {
        if ($this->isPost) {
            $username = $_POST['username'];
            $email = $_POST['email'];
            $confirm_email = $_POST['confirm_email'];
            $password = $_POST['password'];
            $confirm_password = $_POST['confirm_password'];

            //name can contain only alpha characters, digits, dash and underscore
            if (!preg_match("/^[a-zA-Z0-9_-]{5,}$/", $username)) {
                $this->setValidationError("username", "Username must contain only alphabets and space");
            }
            // checking for valid email
            if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
                $this->setValidationError("email", "Please enter a valid email address");
            }

            if ($email != $confirm_email) {
                $this->setValidationError("confirm-email", "Email and Confirm Email doesn't match");
                //$confirm_email_error = "Email and Confirm Email doesn't match";
            }
            // password can contain at least 6 characters
            if (strlen($password) < 6) {
                $this->setValidationError("password", "Password must be minimum of 6 characters");
            }
            // check whether password matches with confirm password
            if ($password != $confirm_password) {
                $this->setValidationError("confirm-password", "Password and Confirm Password doesn't match");
            }

            $password_hash = password_hash($password, PASSWORD_BCRYPT);

            $isExistingUser = $this->model->isUserExistsByEmail($email);

            //if user exist set user existing msg and redirect to register
            if ($isExistingUser) {
                $this->setValidationError("already_exists", "User with this email already exists!");

            } else { // if not exists

                if ($this->formValid()) {
                    $userId = $this->model->register($username, $password_hash, $email);

                    if ($userId) {
                        $_SESSION['loggedIn'] = true;
                        $_SESSION['username'] = $username;
                        $_SESSION['userId'] = $userId[0];
                        $_SESSION['profile-pic'] = NULL;
                        $_SESSION['message'] = 'You are successfully registered!';

                        header('Location: ' . APP_ROOT);
                    } else {
                        $this->addErrorMessage("Registration failed.");
                    }
                }

            }
        }
    }

    function login()
    {
        if ($this->isPost) {
            $username = $_POST['username'];
            $password = $_POST['password'];
            $isUserExists = $this->model->isUserExistsByUsername($username);

            // user exists
            if ($isUserExists) {
                $currentUser = $this->model->login($username);

                if (password_verify($password, $currentUser['password'])) {
                    $_SESSION['userId'] = $currentUser['id'];
                    $_SESSION['username'] = $currentUser['username'];
                    $_SESSION['loggedIn'] = true;
                    $_SESSION['profile-pic'] = $currentUser['profile_pic'];
                    $_SESSION['message'] = 'You are logged in!';
                    $this->addInfoMessage("Login successful!");

                    header('Location: ' . APP_ROOT);
                } else {
                    $this->setValidationError("inputUsernameEmail", "Wrong username/password combination.");}
            } else {
                $this->setValidationError("inputUsernameEmail", "Wrong username/password combination.");}
        }

    }

    function logout()
    {
        session_destroy();
        header('Location: ' . APP_ROOT);
        $this->addInfoMessage("Log out successful.");
    }

    function profile($userId) {
        // load current user for view
        $user = $this->model->getUserById($userId);
        $this->model->getUserByUsername($_SESSION['username']);
        $this->user = $user;

        if ($this->isPost) {
            $first_name = $_POST['first_name'];
            $last_name = $_POST['last_name'];
            $email = $_POST['email'];
            $username = $_POST['username'];
            $password = $_POST['password'];
            $confirm_password= $_POST['confirm_password'];
            $profile_pic_path = FILE_PATH . $username . ".png";

            if (!preg_match("/^[a-zA-Z0-9_-]{5,}$/", $username)) {
                $this->setValidationError("username", "Username must contain only alphabets and space");
            }
            // checking for valid email
            if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
                $this->setValidationError("email", "Please enter a valid email address");
            }

            // password can contain at least 6 characters
            if (strlen($password) < 6) {
                $this->setValidationError("password", "Password must be minimum of 6 characters");
            }

            // check whether password matches with confirm password
            if ($password != $confirm_password) {
                $this->setValidationError("confirm-password", "Password and Confirm Password doesn't match");
            }


            $password_hash = password_hash($password, PASSWORD_BCRYPT);
            if ($this->formValid()) {

                // if has set profile pic check for allowed format and copy picture
                if ($_FILES['profile_pic']['name']) {

                    if (!preg_match("!image!", $_FILES['profile_pic']['type'])) {
                        $this->setValidationError('file', "Please only upload GIF, JPG and PNG");
                    }

                    if ($_FILES['profile_pic']['size'] > 300000) {
                        var_dump($_FILES['profile_pic']['size']);
                        $this->setValidationError('file', "Sorry, your file is too large. Allowed size: 3 MB.");
                    }

                    //copy image to content/image/profile-pics
                    if (move_uploaded_file($_FILES['profile_pic']['tmp_name'], $profile_pic_path)) {

                    } else {
                        $this->setValidationError('file', "File upload failed.");
                    }

                } else { // if not set profile pic update with
                    $profile_pic_path = $this->user['profile_pic'];
                }

                $isEdited = $this->model->editUser($userId, $username, $password_hash, $email, $first_name, $last_name, $profile_pic_path);

                if ($isEdited) {
                    $_SESSION['username'] = $username;
                    $_SESSION['profile-pic'] = $profile_pic_path;
                    $this->addInfoMessage('Success edit');
                    header('Location: ' . APP_ROOT ."/users/profile/" . $userId);
                } else {
                    $this->addErrorMessage('Edit failed');
                }

            }
        }
    }

}